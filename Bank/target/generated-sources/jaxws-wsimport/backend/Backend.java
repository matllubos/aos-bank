
package backend;

import java.math.BigDecimal;
import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.1.3-b02-
 * Generated source version: 2.1
 * 
 */
@WebService(name = "Backend", targetNamespace = "http://backend/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface Backend {


    /**
     * 
     * @param amount
     * @param accountNumber
     * @param currency
     * @return
     *     returns java.math.BigDecimal
     * @throws BackendException_Exception
     */
    @WebMethod
    @WebResult(name = "currentBalance", targetNamespace = "")
    @RequestWrapper(localName = "depositMoney", targetNamespace = "http://backend/", className = "backend.DepositMoney")
    @ResponseWrapper(localName = "depositMoneyResponse", targetNamespace = "http://backend/", className = "backend.DepositMoneyResponse")
    public BigDecimal depositMoney(
        @WebParam(name = "accountNumber", targetNamespace = "")
        int accountNumber,
        @WebParam(name = "amount", targetNamespace = "")
        BigDecimal amount,
        @WebParam(name = "currency", targetNamespace = "")
        String currency)
        throws BackendException_Exception
    ;

    /**
     * 
     * @param accountNumber
     * @param currency
     * @return
     *     returns java.math.BigDecimal
     * @throws BackendException_Exception
     */
    @WebMethod
    @WebResult(name = "balance", targetNamespace = "")
    @RequestWrapper(localName = "getCurrentBalance", targetNamespace = "http://backend/", className = "backend.GetCurrentBalance")
    @ResponseWrapper(localName = "getCurrentBalanceResponse", targetNamespace = "http://backend/", className = "backend.GetCurrentBalanceResponse")
    public BigDecimal getCurrentBalance(
        @WebParam(name = "accountNumber", targetNamespace = "")
        int accountNumber,
        @WebParam(name = "currency", targetNamespace = "")
        String currency)
        throws BackendException_Exception
    ;

    /**
     * 
     * @param amount
     * @param accountNumber
     * @param currency
     * @return
     *     returns java.math.BigDecimal
     * @throws BackendException_Exception
     */
    @WebMethod
    @WebResult(name = "currentBalance", targetNamespace = "")
    @RequestWrapper(localName = "withdrawMoney", targetNamespace = "http://backend/", className = "backend.WithdrawMoney")
    @ResponseWrapper(localName = "withdrawMoneyResponse", targetNamespace = "http://backend/", className = "backend.WithdrawMoneyResponse")
    public BigDecimal withdrawMoney(
        @WebParam(name = "accountNumber", targetNamespace = "")
        int accountNumber,
        @WebParam(name = "amount", targetNamespace = "")
        BigDecimal amount,
        @WebParam(name = "currency", targetNamespace = "")
        String currency)
        throws BackendException_Exception
    ;

    /**
     * 
     * @param amount
     * @param targetBank
     * @param myAccount
     * @param targetAccount
     * @param currency
     * @return
     *     returns boolean
     * @throws BackendException_Exception
     */
    @WebMethod
    @WebResult(name = "sent", targetNamespace = "")
    @RequestWrapper(localName = "transferMoney", targetNamespace = "http://backend/", className = "backend.TransferMoney")
    @ResponseWrapper(localName = "transferMoneyResponse", targetNamespace = "http://backend/", className = "backend.TransferMoneyResponse")
    public boolean transferMoney(
        @WebParam(name = "myAccount", targetNamespace = "")
        int myAccount,
        @WebParam(name = "targetAccount", targetNamespace = "")
        int targetAccount,
        @WebParam(name = "targetBank", targetNamespace = "")
        String targetBank,
        @WebParam(name = "amount", targetNamespace = "")
        BigDecimal amount,
        @WebParam(name = "currency", targetNamespace = "")
        String currency)
        throws BackendException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(name = "isSupportedCurrencyResult", targetNamespace = "")
    @RequestWrapper(localName = "isSupportedCurrency", targetNamespace = "http://backend/", className = "backend.IsSupportedCurrency")
    @ResponseWrapper(localName = "isSupportedCurrencyResponse", targetNamespace = "http://backend/", className = "backend.IsSupportedCurrencyResponse")
    public boolean isSupportedCurrency(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0);

    /**
     * 
     * @param arg0
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "isThisBank", targetNamespace = "http://backend/", className = "backend.IsThisBank")
    @ResponseWrapper(localName = "isThisBankResponse", targetNamespace = "http://backend/", className = "backend.IsThisBankResponse")
    public boolean isThisBank(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0);

    /**
     * 
     * @return
     *     returns float
     */
    @WebMethod
    @WebResult(name = "interestRate", targetNamespace = "")
    @RequestWrapper(localName = "getInterestRate", targetNamespace = "http://backend/", className = "backend.GetInterestRate")
    @ResponseWrapper(localName = "getInterestRateResponse", targetNamespace = "http://backend/", className = "backend.GetInterestRateResponse")
    public float getInterestRate();

    /**
     * 
     * @param accountNumber
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(name = "existAccountResponse", targetNamespace = "")
    @RequestWrapper(localName = "existAccount", targetNamespace = "http://backend/", className = "backend.ExistAccount")
    @ResponseWrapper(localName = "existAccountResponse", targetNamespace = "http://backend/", className = "backend.ExistAccountResponse")
    public boolean existAccount(
        @WebParam(name = "accountNumber", targetNamespace = "")
        int accountNumber);

    /**
     * 
     * @param name
     * @param currency
     * @return
     *     returns int
     * @throws BackendException_Exception
     */
    @WebMethod
    @WebResult(name = "accountNumber", targetNamespace = "")
    @RequestWrapper(localName = "createAccount", targetNamespace = "http://backend/", className = "backend.CreateAccount")
    @ResponseWrapper(localName = "createAccountResponse", targetNamespace = "http://backend/", className = "backend.CreateAccountResponse")
    public int createAccount(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "currency", targetNamespace = "")
        String currency)
        throws BackendException_Exception
    ;

    /**
     * 
     * @param amount
     * @param months
     * @param accountNumber
     * @param currency
     * @return
     *     returns int
     * @throws BackendException_Exception
     */
    @WebMethod
    @WebResult(name = "loanNumber", targetNamespace = "")
    @RequestWrapper(localName = "createLoan", targetNamespace = "http://backend/", className = "backend.CreateLoan")
    @ResponseWrapper(localName = "createLoanResponse", targetNamespace = "http://backend/", className = "backend.CreateLoanResponse")
    public int createLoan(
        @WebParam(name = "accountNumber", targetNamespace = "")
        int accountNumber,
        @WebParam(name = "currency", targetNamespace = "")
        String currency,
        @WebParam(name = "amount", targetNamespace = "")
        BigDecimal amount,
        @WebParam(name = "months", targetNamespace = "")
        int months)
        throws BackendException_Exception
    ;

    /**
     * 
     * @param amount
     * @param loanNumber
     * @param currency
     * @return
     *     returns java.math.BigDecimal
     * @throws BackendException_Exception
     */
    @WebMethod
    @WebResult(name = "remainMoney", targetNamespace = "")
    @RequestWrapper(localName = "paidPayment", targetNamespace = "http://backend/", className = "backend.PaidPayment")
    @ResponseWrapper(localName = "paidPaymentResponse", targetNamespace = "http://backend/", className = "backend.PaidPaymentResponse")
    public BigDecimal paidPayment(
        @WebParam(name = "loanNumber", targetNamespace = "")
        int loanNumber,
        @WebParam(name = "currency", targetNamespace = "")
        String currency,
        @WebParam(name = "amount", targetNamespace = "")
        BigDecimal amount)
        throws BackendException_Exception
    ;

    /**
     * 
     * @param interestRate
     */
    @WebMethod
    @RequestWrapper(localName = "setInterestRate", targetNamespace = "http://backend/", className = "backend.SetInterestRate")
    @ResponseWrapper(localName = "setInterestRateResponse", targetNamespace = "http://backend/", className = "backend.SetInterestRateResponse")
    public void setInterestRate(
        @WebParam(name = "interestRate", targetNamespace = "")
        float interestRate);

    /**
     * 
     * @param accountNumber
     * @return
     *     returns int
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getCountBadPayment", targetNamespace = "http://backend/", className = "backend.GetCountBadPayment")
    @ResponseWrapper(localName = "getCountBadPaymentResponse", targetNamespace = "http://backend/", className = "backend.GetCountBadPaymentResponse")
    public int getCountBadPayment(
        @WebParam(name = "accountNumber", targetNamespace = "")
        int accountNumber);

    /**
     * 
     * @param accountNumber
     * @return
     *     returns int
     * @throws BackendException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getCountGoodPayment", targetNamespace = "http://backend/", className = "backend.GetCountGoodPayment")
    @ResponseWrapper(localName = "getCountGoodPaymentResponse", targetNamespace = "http://backend/", className = "backend.GetCountGoodPaymentResponse")
    public int getCountGoodPayment(
        @WebParam(name = "accountNumber", targetNamespace = "")
        int accountNumber)
        throws BackendException_Exception
    ;

    /**
     * 
     * @return
     *     returns java.math.BigDecimal
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllCapital", targetNamespace = "http://backend/", className = "backend.GetAllCapital")
    @ResponseWrapper(localName = "getAllCapitalResponse", targetNamespace = "http://backend/", className = "backend.GetAllCapitalResponse")
    public BigDecimal getAllCapital();

    /**
     * 
     * @param accountNumber
     * @return
     *     returns java.util.List<backend.TransactionLogData>
     * @throws BackendException_Exception
     */
    @WebMethod
    @WebResult(name = "transactions", targetNamespace = "")
    @RequestWrapper(localName = "getTransactions", targetNamespace = "http://backend/", className = "backend.GetTransactions")
    @ResponseWrapper(localName = "getTransactionsResponse", targetNamespace = "http://backend/", className = "backend.GetTransactionsResponse")
    public List<TransactionLogData> getTransactions(
        @WebParam(name = "accountNumber", targetNamespace = "")
        int accountNumber)
        throws BackendException_Exception
    ;

    /**
     * 
     * @param accountNumber
     * @return
     *     returns java.util.List<backend.LoanData>
     */
    @WebMethod
    @WebResult(name = "loans", targetNamespace = "")
    @RequestWrapper(localName = "getLoans", targetNamespace = "http://backend/", className = "backend.GetLoans")
    @ResponseWrapper(localName = "getLoansResponse", targetNamespace = "http://backend/", className = "backend.GetLoansResponse")
    public List<LoanData> getLoans(
        @WebParam(name = "accountNumber", targetNamespace = "")
        int accountNumber);

    /**
     * 
     * @param amount
     * @param accountNumber
     * @param accountFromNumber
     * @param bankCode
     * @param currency
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(name = "complete", targetNamespace = "")
    @RequestWrapper(localName = "addTransferPayment", targetNamespace = "http://backend/", className = "backend.AddTransferPayment")
    @ResponseWrapper(localName = "addTransferPaymentResponse", targetNamespace = "http://backend/", className = "backend.AddTransferPaymentResponse")
    public boolean addTransferPayment(
        @WebParam(name = "accountNumber", targetNamespace = "")
        int accountNumber,
        @WebParam(name = "currency", targetNamespace = "")
        String currency,
        @WebParam(name = "amount", targetNamespace = "")
        BigDecimal amount,
        @WebParam(name = "accountFromNumber", targetNamespace = "")
        int accountFromNumber,
        @WebParam(name = "bankCode", targetNamespace = "")
        String bankCode);

    /**
     * 
     * @param amount
     * @param accountNumber
     * @param accountFromNumber
     * @param bankCode
     * @param currency
     */
    @WebMethod
    @RequestWrapper(localName = "cancelTransferPaymentToAccount", targetNamespace = "http://backend/", className = "backend.CancelTransferPaymentToAccount")
    @ResponseWrapper(localName = "cancelTransferPaymentToAccountResponse", targetNamespace = "http://backend/", className = "backend.CancelTransferPaymentToAccountResponse")
    public void cancelTransferPaymentToAccount(
        @WebParam(name = "accountNumber", targetNamespace = "")
        int accountNumber,
        @WebParam(name = "currency", targetNamespace = "")
        String currency,
        @WebParam(name = "amount", targetNamespace = "")
        BigDecimal amount,
        @WebParam(name = "accountFromNumber", targetNamespace = "")
        int accountFromNumber,
        @WebParam(name = "bankCode", targetNamespace = "")
        String bankCode);

    /**
     * 
     * @param accountNumber
     * @return
     *     returns backend.AccountData
     * @throws BackendException_Exception
     */
    @WebMethod
    @WebResult(name = "account", targetNamespace = "")
    @RequestWrapper(localName = "getAccount", targetNamespace = "http://backend/", className = "backend.GetAccount")
    @ResponseWrapper(localName = "getAccountResponse", targetNamespace = "http://backend/", className = "backend.GetAccountResponse")
    public AccountData getAccount(
        @WebParam(name = "accountNumber", targetNamespace = "")
        int accountNumber)
        throws BackendException_Exception
    ;

}
